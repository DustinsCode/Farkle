package groupthree;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.effect.DropShadow;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.IOException;
import java.util.ArrayList;

/**
 * This is the controller class for Farkle. It is the class that interfaces between
 * the FXML files generated by Scene Builder and the local variables and objects in Java
 * via the @FXML annotation.
 * @author Wes Harrison
 * @version 1.0
 */
public class FarkleController {

    /*
    All of these are FXML-Linked rectangles to the GameScreen. This is the link between the UI FXML file
    and the controller class for it.
     */
    @FXML
   protected Rectangle rect1;
    @FXML
   protected Rectangle rect2;
    @FXML
   protected Rectangle rect3;
    @FXML
   protected Rectangle rect4;
    @FXML
   protected Rectangle rect5;
    @FXML
   protected Rectangle rect6;

   static ArrayList<Rectangle> rectangles = new ArrayList<>();

    private DiceUILogic game = new DiceUILogic();


    /**
     * When this method is called, it will exit the application.
     */
    public void exitHandler() {
        System.exit(0);
    }


    /**
     * When this method is called, it will change the Scene to GameScreen.
     * @param event The button push event that signals entrance into the main game screen.
     */
    public void enterGameScreenButtonPushed(ActionEvent event) {

        try {

            Parent gameScreenParent = FXMLLoader.load(getClass().getResource("GameScreen.fxml"));
            Scene gameScreen = new Scene(gameScreenParent);
            Stage window = (Stage)(((Node)event.getSource()).getScene().getWindow());
            window.setScene(gameScreen);
            window.show();


        } catch (IOException e) {
            System.out.println("We could not find the file for the main game screen.");


        }


    }


    private void constructRectangles() {
        rectangles.clear();
        rectangles.add(rect1);
        rectangles.add(rect2);
        rectangles.add(rect3);
        rectangles.add(rect4);
        rectangles.add(rect5);
        rectangles.add(rect6);
    }

    /**
     * This method handles the ActionEvent generated by pressing the "Roll Dice" button within the application.
     * It animates the current rectangles on the screen as well as utilizes the Dice class and initializes a random number
     * onto each one.
     * @param event is the ActionEvent generated by pressing the Roll Dice button.
     */
    public void rollTheDiceButtonPushed(ActionEvent event) {

        // Adds rectangles to the rectangle arrayList.
            constructRectangles();
        // Sets ArrayList of Dice with random values if they're not held.
             game.setHand();
            game.mapDice();

            //Animates the Dice


            Timeline diceAnimate = new Timeline(

                    new KeyFrame(Duration.ZERO,
                            ae -> game.setRectFill(game.d1)),

                    new KeyFrame(Duration.millis(111),
                            ae -> game.setRectFill(game.d2)),

                    new KeyFrame(Duration.millis(222),
                            ae -> game.setRectFill(game.d3)),

                    new KeyFrame(Duration.millis(333),
                            ae -> game.setRectFill(game.d4)),

                    new KeyFrame(Duration.millis(444),
                            ae -> game.setRectFill(game.d5)),

                    new KeyFrame(Duration.millis(555),
                            ae -> game.setRectFill(game.d6)),

                    new KeyFrame(Duration.millis(777),
                            ae -> game.getHand(rectangles)) // Calls getHand from our game instance and sets the fills.


            );

        diceAnimate.setCycleCount(1);
        diceAnimate.play();
    }


    /**
     * This method sets a non-held rectangle to a random number on rolling the rectangles.
     */
    public void bankPointsButtonPushed(ActionEvent event){



    }


    public void holdRectangles(MouseEvent event){

        // To be used for adding an outer glow to rectangle.
        int depth = 70;
        DropShadow borderGlow= new DropShadow();
        borderGlow.setOffsetY(0f);
        borderGlow.setOffsetX(0f);
        borderGlow.setColor(Color.YELLOW);
        borderGlow.setWidth(depth);
        borderGlow.setHeight(depth);





        Rectangle rectX = (Rectangle) event.getSource();

        rectX.setEffect(borderGlow);

        game.setHoldStatus(rectX);
}

}
