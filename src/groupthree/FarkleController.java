package groupthree;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.IOException;
import java.util.ArrayList;

/**
 * This is the controller class for Farkle. It is the class that interfaces between
 * the FXML files generated by Scene Builder and the local variables and objects in Java
 * via the @FXML annotation.
 * @author Wes Harrison
 * @version 1.0
 */
public class FarkleController {

    /**
     * All of these are the rectangles that represent rectangles on the application scene.
     */
    @FXML
   protected Rectangle rect1;
    @FXML
   protected Rectangle rect2;
    @FXML
   protected Rectangle rect3;
    @FXML
   protected Rectangle rect4;
    @FXML
   protected Rectangle rect5;
    @FXML
   protected Rectangle rect6;

    /**
     * These are all images of dice.
     */

   static ArrayList<Rectangle> rectangles = new ArrayList<>();
    DiceUILogic game = new DiceUILogic();


    /**
     * When this method is called, it will exit the application.
     */
    public void exitHandler() {
        System.exit(0);
    }


    /**
     * When this method is called, it will change the Scene to GameScreen.
     * @param event The button push event that signals entrance into the main game screen.
     */
    public void enterGameScreenButtonPushed(ActionEvent event) throws IOException {

        Parent gameScreenParent = FXMLLoader.load(getClass().getResource("GameScreen.fxml"));
        Scene gameScreen = new Scene(gameScreenParent);

        Stage window = (Stage)(((Node)event.getSource()).getScene().getWindow());
        window.setScene(gameScreen);
        window.show();
    }


    public void constructRectangles() {
        rectangles.add(rect1);
        rectangles.add(rect2);
        rectangles.add(rect3);
        rectangles.add(rect4);
        rectangles.add(rect5);
        rectangles.add(rect6);
    }

    /**
     * This method handles the ActionEvent generated by pressing the "Roll Dice" button within the application.
     * It animates the current rectangles on the screen as well as utilizes the Dice class and initializes a random number
     * onto each one.
     * @param event is the ActionEvent generated by pressing the Roll Dice button.
     */

    public void rollTheDiceButtonPushed(ActionEvent event) {
        // Sets ArrayList of dice with random values if they're not held.
             game.setHand();

            //Animates the dice
            constructRectangles();

            Timeline diceAnimate = new Timeline(

                    new KeyFrame(Duration.ZERO,
                            ae -> setRectFill(game.d1)),

                    new KeyFrame(Duration.millis(333),
                            ae -> setRectFill(game.d2)),

                    new KeyFrame(Duration.millis(666),
                            ae -> setRectFill(game.d3)),

                    new KeyFrame(Duration.millis(1333),
                            ae -> setRectFill(game.d4)),

                    new KeyFrame(Duration.millis(1666),
                            ae -> setRectFill(game.d5)),

                    new KeyFrame(Duration.millis(1999),
                            ae -> setRectFill(game.d6)),

                    new KeyFrame(Duration.millis(2333),
                            ae -> game.getHand(rectangles))


            );

        diceAnimate.setCycleCount(1);
        diceAnimate.play();
    }



    /**
     * This method simultaneously sets the fill for each die within the ArrayList to a specific image.
     * @param dnum the Image being passed that the rectangles will be set to.
     */
    public void setRectFill(Image dnum) {
        for (int i = 0; i < rectangles.size(); i++) {

            if( !game.hand.get(i).isHeld() ){
             rectangles.get(i).setFill(new ImagePattern(dnum));

    }}}


    /**
     * This method sets a non-held rectangle to a random number on rolling the rectangles.
     */


    public void bankPointsButtonPushed(ActionEvent event){



    }




}
