package farkleapp;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import java.io.IOException;
import java.util.ArrayList;

/**
 * This is the controller class for Farkle.
 * It is the class that interfaces between
 * the FXML files generated by Scene Builder and
 * the local variables and objects in Java
 * via the @FXML annotation.
 * @author Wes Harrison
 * @version 1.0
 */

public class Controller implements FarkleControllerInterface {

    
    /**
     * The java-FXML accessor variable for the first rectangle.
     */
    @FXML
   private Rectangle rect1;
    /**
     * The java-FXML accessor variable for the second rectangle.
     */
    @FXML
   private Rectangle rect2;
    /**
     * The java-FXML accessor variable for the third rectangle.
     */
    @FXML
   private Rectangle rect3;
    /**
     * The java-FXML accessor variable for the fourth rectangle.
     */
    @FXML
   private Rectangle rect4;
    /**
     * The java-FXML accessor variable for the fifth rectangle.
     */
    @FXML
   private Rectangle rect5;
    /**
     * The java-FXML accessor variable for the sixth rectangle.
     */
    @FXML
   private Rectangle rect6;
    /**
     * This is the label that keeps track of bank points.
     */
    @FXML
    private Label bankPoints;
    /**
     * This is the label that keeps track of the round points.
     */
    @FXML
    private Label roundPoints;



    /**
     * ArrayList of RECTANGLE_LIST representing the dice on the screen.
     */
   private static final ArrayList<Rectangle> RECTANGLE_LIST = new ArrayList<>();

    /**
     * Instance of our game model.
     */
    private final Model model = new Model(this);

    /**
     * This method simply adds our RECTANGLE_LIST into the rectangle ArrayList.
     */
    private void setUp() {
        RECTANGLE_LIST.clear();
        RECTANGLE_LIST.add(rect1);
        RECTANGLE_LIST.add(rect2);
        RECTANGLE_LIST.add(rect3);
        RECTANGLE_LIST.add(rect4);
        RECTANGLE_LIST.add(rect5);
        RECTANGLE_LIST.add(rect6);
        model.setHand();
        model.mapDice();
    }
    /**
     * The default constructor for our controller.
     */
    public Controller() {


    }
    /**
     * When this method is called, it will exit the application.
     */
    public void exitHandler() {
        System.exit(0);
    }
    /**
     * When this method is called, it will change the Scene to GameScreen.
     * @param event The button push event that signals entrance
     *              into the main model screen.
     */
    public void enterGameScreenButtonPushed(final ActionEvent event)  {

        try {
            Parent gameScreenParent = FXMLLoader.load(
                    getClass().getResource("Single_Player_Dice_View.fxml")
            );
            Scene gameScreen = new Scene(gameScreenParent);
            Stage window = (Stage) ((Node)
                    event.getSource()).getScene().getWindow();
            window.setScene(gameScreen);
            window.show();

        } catch (IOException e) {
            System.out.println("The GameScreen FXML file was not found.");
        }




    }
    /**
     * This method handles the ActionEvent generated by pressing
     * the "Roll Dice" button within the application.
     * It animates the current RECTANGLE_LIST on the screen as well
     * as utilizes the Dice class and initializes a random number
     * onto each one.
     * @param event is the ActionEvent generated
     *             by pressing the Roll Dice button.
     */
    public void rollTheDiceButtonPushed(final ActionEvent event) {


        // Checks for farkle for each roll. Both must be true.
       if ((model.getRollCount() > 0) && model.isFarkle(RECTANGLE_LIST)) {


            roundPoints.setText(Integer.toString(model.getRoundScore()));
            bankPoints.setText(Integer.toString(model.getBankScore()));

        }
        roundPoints.setText(Integer.toString(model.getRoundScore()));

        // Adds all rectangles to the RECTANGLE_LIST,
        // maps our dice, rolls our dice
        // and sets the hand in our model.
        setUp();

        //Animates the Dice
        model.animateView();

        model.setRolled(); // Increments the rolled variable.



    }
    /**
     * This method runs when the "Bank Points" button has been clicked.
     * @param event MouseEvent that this method takes as the input.
     */
    public void bankPointsButtonPushed(final ActionEvent event) {
        model.setBankScore();
       bankPoints.setText(Integer.toString(model.getBankScore()));
        model.resetHand();
        model.setRollCount(0);
        roundPoints.setText(Integer.toString(model.getRoundScore()));
        model.wonGameStatus();
        rollTheDiceButtonPushed(event);



    }
    /**
     * This method will call methods from our model instance of Model to
     * take our RECTANGLE_LIST and add a glow, then hold the corresponding dice.
     * @param event The Mouse2Event generated by clicking a rectangle.
     */
    public void holdRectangles(final MouseEvent event) {


       Rectangle rectX = (Rectangle) event.getSource();

            model.checkRolled();
            model.modHoldStatus(rectX);
            roundPoints.setText(Integer.toString(model.getEstRoundScore()));



}
    /**
     * This method is to return our ArrayList of
     * RECTANGLE_LIST for use by other classes.
     * @return Current ArrayList of Rectangles instantiated in Controller.
     */
    public ArrayList<Rectangle> getRectangles() {
        
        return RECTANGLE_LIST;

    }

}


